//
// PreconfiguredproductsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PreconfiguredproductsAPI: APIBase {
    /**
     
     Insert a preconfigured product
     
     - parameter preconfiguredProductInsert: (body) The product to be inserted
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createPreconfiguredproducts(preconfiguredProductInsert preconfiguredProductInsert: PreconfiguredProductInsert, version: Int, source: String, completion: ((data: PreconfiguredProductsInsertResponse?, error: ErrorType?) -> Void)) {
        createPreconfiguredproductsWithRequestBuilder(preconfiguredProductInsert: preconfiguredProductInsert, version: version, source: source).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Insert a preconfigured product
     
     - POST /v/{version}/source/{source}/preconfiguredproducts/
     - Insert a preconfigured product into your recipe.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter preconfiguredProductInsert: (body) The product to be inserted
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api

     - returns: RequestBuilder<PreconfiguredProductsInsertResponse> 
     */
    public class func createPreconfiguredproductsWithRequestBuilder(preconfiguredProductInsert preconfiguredProductInsert: PreconfiguredProductInsert, version: Int, source: String) -> RequestBuilder<PreconfiguredProductsInsertResponse> {
        var path = "/v/{version}/source/{source}/preconfiguredproducts/"
        path = path.stringByReplacingOccurrencesOfString("{version}", withString: "\(version)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{source}", withString: "\(source)", options: .LiteralSearch, range: nil)
        let URLString = Gooten.API.ClientAPI.basePath + path
        
        let parameters = preconfiguredProductInsert.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<PreconfiguredProductsInsertResponse>.Type = Gooten.API.ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a preconfigured product
     
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api
     - parameter sku: (query) The preconfigured product&#39;s sku.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePreconfiguredproducts(version version: Int, source: String, sku: String?, completion: ((data: PreconfiguredProductsInsertResponse?, error: ErrorType?) -> Void)) {
        deletePreconfiguredproductsWithRequestBuilder(version: version, source: source, sku: sku).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Delete a preconfigured product
     
     - DELETE /v/{version}/source/{source}/preconfiguredproducts/
     - Delete a preconfigured product from your recipe.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api
     - parameter sku: (query) The preconfigured product&#39;s sku.

     - returns: RequestBuilder<PreconfiguredProductsInsertResponse> 
     */
    public class func deletePreconfiguredproductsWithRequestBuilder(version version: Int, source: String, sku: String?) -> RequestBuilder<PreconfiguredProductsInsertResponse> {
        var path = "/v/{version}/source/{source}/preconfiguredproducts/"
        path = path.stringByReplacingOccurrencesOfString("{version}", withString: "\(version)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{source}", withString: "\(source)", options: .LiteralSearch, range: nil)
        let URLString = Gooten.API.ClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "sku": sku
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PreconfiguredProductsInsertResponse>.Type = Gooten.API.ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a list of your preconfigured products
     
     - parameter countryCode: (query) The country code where it would be shipped to. For example, &#39;US&#39; or &#39;CA&#39;
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api
     - parameter languageCode: (query) Two-character language code, defaults to \&quot;en\&quot; (english)
     - parameter currencyCode: (query) Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPreconfiguredproducts(countryCode countryCode: String, version: Int, source: String, languageCode: String?, currencyCode: String?, completion: ((data: PreconfiguredProductsResponse?, error: ErrorType?) -> Void)) {
        getPreconfiguredproductsWithRequestBuilder(countryCode: countryCode, version: version, source: source, languageCode: languageCode, currencyCode: currencyCode).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a list of your preconfigured products
     
     - GET /v/{version}/source/{source}/preconfiguredproducts/
     - Get a list of your preconfigured products. The products returned are entirely specific to your recipe.
     - examples: [{contentType=application/json, example={
  "PreconfiguredProducts" : [ {
    "Description" : "aeiou",
    "Price" : {
      "CurrencyCode" : "aeiou",
      "Price" : 123456789,
      "CurrencyFormat" : "aeiou",
      "FormattedPrice" : "aeiou",
      "CurrencyDigits" : 123456789
    },
    "Images" : [ {
      "Description" : "aeiou",
      "Index" : 123456789,
      "Id" : "aeiou",
      "Url" : "aeiou"
    } ],
    "Items" : [ {
      "Preconfigurations" : [ {
        "SpaceId" : "aeiou",
        "Url" : "aeiou"
      } ],
      "ProductVariantSku" : "aeiou",
      "ProductId" : 123456789
    } ],
    "Sku" : "aeiou",
    "Name" : "aeiou"
  } ]
}}]
     
     - parameter countryCode: (query) The country code where it would be shipped to. For example, &#39;US&#39; or &#39;CA&#39;
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api
     - parameter languageCode: (query) Two-character language code, defaults to \&quot;en\&quot; (english)
     - parameter currencyCode: (query) Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)

     - returns: RequestBuilder<PreconfiguredProductsResponse> 
     */
    public class func getPreconfiguredproductsWithRequestBuilder(countryCode countryCode: String, version: Int, source: String, languageCode: String?, currencyCode: String?) -> RequestBuilder<PreconfiguredProductsResponse> {
        var path = "/v/{version}/source/{source}/preconfiguredproducts/"
        path = path.stringByReplacingOccurrencesOfString("{version}", withString: "\(version)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{source}", withString: "\(source)", options: .LiteralSearch, range: nil)
        let URLString = Gooten.API.ClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "countryCode": countryCode,
            "languageCode": languageCode,
            "currencyCode": currencyCode
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<PreconfiguredProductsResponse>.Type = Gooten.API.ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Update a preconfigured product
     
     - parameter preconfiguredProductInsert: (body) The product to be inserted
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePreconfiguredproducts(preconfiguredProductInsert preconfiguredProductInsert: PreconfiguredProductInsert, version: Int, source: String, completion: ((data: PreconfiguredProductsInsertResponse?, error: ErrorType?) -> Void)) {
        updatePreconfiguredproductsWithRequestBuilder(preconfiguredProductInsert: preconfiguredProductInsert, version: version, source: source).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Update a preconfigured product
     
     - PUT /v/{version}/source/{source}/preconfiguredproducts/
     - Update a preconfigured product into your recipe.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter preconfiguredProductInsert: (body) The product to be inserted
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api

     - returns: RequestBuilder<PreconfiguredProductsInsertResponse> 
     */
    public class func updatePreconfiguredproductsWithRequestBuilder(preconfiguredProductInsert preconfiguredProductInsert: PreconfiguredProductInsert, version: Int, source: String) -> RequestBuilder<PreconfiguredProductsInsertResponse> {
        var path = "/v/{version}/source/{source}/preconfiguredproducts/"
        path = path.stringByReplacingOccurrencesOfString("{version}", withString: "\(version)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{source}", withString: "\(source)", options: .LiteralSearch, range: nil)
        let URLString = Gooten.API.ClientAPI.basePath + path
        
        let parameters = preconfiguredProductInsert.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<PreconfiguredProductsInsertResponse>.Type = Gooten.API.ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
