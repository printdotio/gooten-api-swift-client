// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

			// Decoder for [Address]
            Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
                return Decoders.decode(clazz: [Address].self, source: source)
            }
			// Decoder for Address
            Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Address()
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postalCode"])
                instance.stateOrProvinceCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateOrProvinceCode"])
                instance.streetLines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["streetLines"])
                return instance
            }
			

			// Decoder for [Category]
            Decoders.addDecoder(clazz: [Category].self) { (source: AnyObject) -> [Category] in
                return Decoders.decode(clazz: [Category].self, source: source)
            }
			// Decoder for Category
            Decoders.addDecoder(clazz: Category.self) { (source: AnyObject) -> Category in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Category()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for [Country]
            Decoders.addDecoder(clazz: [Country].self) { (source: AnyObject) -> [Country] in
                return Decoders.decode(clazz: [Country].self, source: source)
            }
			// Decoder for Country
            Decoders.addDecoder(clazz: Country.self) { (source: AnyObject) -> Country in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Country()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.isSupported = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isSupported"])
                instance.measurementCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["measurementCode"])
                instance.flagUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flagUrl"])
                instance.defaultCurrency = Decoders.decodeOptional(clazz: Currency.self, source: sourceDictionary["defaultCurrency"])
                return instance
            }
			

			// Decoder for [CountryList]
            Decoders.addDecoder(clazz: [CountryList].self) { (source: AnyObject) -> [CountryList] in
                return Decoders.decode(clazz: [CountryList].self, source: source)
            }
			// Decoder for CountryList
            Decoders.addDecoder(clazz: CountryList.self) { (source: AnyObject) -> CountryList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CountryList()
                instance.countries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["countries"])
                return instance
            }
			

			// Decoder for [Currency]
            Decoders.addDecoder(clazz: [Currency].self) { (source: AnyObject) -> [Currency] in
                return Decoders.decode(clazz: [Currency].self, source: source)
            }
			// Decoder for Currency
            Decoders.addDecoder(clazz: Currency.self) { (source: AnyObject) -> Currency in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Currency()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"])
                return instance
            }
			

			// Decoder for [FileResult]
            Decoders.addDecoder(clazz: [FileResult].self) { (source: AnyObject) -> [FileResult] in
                return Decoders.decode(clazz: [FileResult].self, source: source)
            }
			// Decoder for FileResult
            Decoders.addDecoder(clazz: FileResult.self) { (source: AnyObject) -> FileResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FileResult()
                instance.price = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["price"])
                return instance
            }
			

			// Decoder for [Image]
            Decoders.addDecoder(clazz: [Image].self) { (source: AnyObject) -> [Image] in
                return Decoders.decode(clazz: [Image].self, source: source)
            }
			// Decoder for Image
            Decoders.addDecoder(clazz: Image.self) { (source: AnyObject) -> Image in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Image()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.index = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["index"])
                instance.thumbnailUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumbnailUrl"])
                instance.manipCommand = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manipCommand"])
                instance.spaceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["spaceId"])
                return instance
            }
			

			// Decoder for [ImageSizeVm]
            Decoders.addDecoder(clazz: [ImageSizeVm].self) { (source: AnyObject) -> [ImageSizeVm] in
                return Decoders.decode(clazz: [ImageSizeVm].self, source: source)
            }
			// Decoder for ImageSizeVm
            Decoders.addDecoder(clazz: ImageSizeVm.self) { (source: AnyObject) -> ImageSizeVm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageSizeVm()
                instance.spaceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["spaceId"])
                instance.width = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["width"])
                instance.height = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["height"])
                return instance
            }
			

			// Decoder for [ImageValidationVm]
            Decoders.addDecoder(clazz: [ImageValidationVm].self) { (source: AnyObject) -> [ImageValidationVm] in
                return Decoders.decode(clazz: [ImageValidationVm].self, source: source)
            }
			// Decoder for ImageValidationVm
            Decoders.addDecoder(clazz: ImageValidationVm.self) { (source: AnyObject) -> ImageValidationVm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageValidationVm()
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                return instance
            }
			

			// Decoder for [ImageValidatorResult]
            Decoders.addDecoder(clazz: [ImageValidatorResult].self) { (source: AnyObject) -> [ImageValidatorResult] in
                return Decoders.decode(clazz: [ImageValidatorResult].self, source: source)
            }
			// Decoder for ImageValidatorResult
            Decoders.addDecoder(clazz: ImageValidatorResult.self) { (source: AnyObject) -> ImageValidatorResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImageValidatorResult()
                instance.hadError = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hadError"])
                instance.issues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["issues"])
                return instance
            }
			

			// Decoder for [Item]
            Decoders.addDecoder(clazz: [Item].self) { (source: AnyObject) -> [Item] in
                return Decoders.decode(clazz: [Item].self, source: source)
            }
			// Decoder for Item
            Decoders.addDecoder(clazz: Item.self) { (source: AnyObject) -> Item in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Item()
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.product = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["product"])
                return instance
            }
			

			// Decoder for [KeyValuePair]
            Decoders.addDecoder(clazz: [KeyValuePair].self) { (source: AnyObject) -> [KeyValuePair] in
                return Decoders.decode(clazz: [KeyValuePair].self, source: source)
            }
			// Decoder for KeyValuePair
            Decoders.addDecoder(clazz: KeyValuePair.self) { (source: AnyObject) -> KeyValuePair in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = KeyValuePair()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for [LanguageDictionary]
            Decoders.addDecoder(clazz: [LanguageDictionary].self) { (source: AnyObject) -> [LanguageDictionary] in
                return Decoders.decode(clazz: [LanguageDictionary].self, source: source)
            }
			// Decoder for LanguageDictionary
            Decoders.addDecoder(clazz: LanguageDictionary.self) { (source: AnyObject) -> LanguageDictionary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LanguageDictionary()
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }
			

			// Decoder for [Meta]
            Decoders.addDecoder(clazz: [Meta].self) { (source: AnyObject) -> [Meta] in
                return Decoders.decode(clazz: [Meta].self, source: source)
            }
			// Decoder for Meta
            Decoders.addDecoder(clazz: Meta.self) { (source: AnyObject) -> Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Meta()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for [ModelFile]
            Decoders.addDecoder(clazz: [ModelFile].self) { (source: AnyObject) -> [ModelFile] in
                return Decoders.decode(clazz: [ModelFile].self, source: source)
            }
			// Decoder for ModelFile
            Decoders.addDecoder(clazz: ModelFile.self) { (source: AnyObject) -> ModelFile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ModelFile()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }
			

			// Decoder for [Order]
            Decoders.addDecoder(clazz: [Order].self) { (source: AnyObject) -> [Order] in
                return Decoders.decode(clazz: [Order].self, source: source)
            }
			// Decoder for Order
            Decoders.addDecoder(clazz: Order.self) { (source: AnyObject) -> Order in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Order()
                instance.shipToAddress = Decoders.decodeOptional(clazz: ShipToAddress.self, source: sourceDictionary["shipToAddress"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.payment = Decoders.decodeOptional(clazz: Payment.self, source: sourceDictionary["payment"])
                instance.couponCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["couponCode"])
                return instance
            }
			

			// Decoder for [OrderItem]
            Decoders.addDecoder(clazz: [OrderItem].self) { (source: AnyObject) -> [OrderItem] in
                return Decoders.decode(clazz: [OrderItem].self, source: source)
            }
			// Decoder for OrderItem
            Decoders.addDecoder(clazz: OrderItem.self) { (source: AnyObject) -> OrderItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderItem()
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.SKU = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SKU"])
                instance.shipCarrierMethodId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["shipCarrierMethodId"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                return instance
            }
			

			// Decoder for [OrderItemImage]
            Decoders.addDecoder(clazz: [OrderItemImage].self) { (source: AnyObject) -> [OrderItemImage] in
                return Decoders.decode(clazz: [OrderItemImage].self, source: source)
            }
			// Decoder for OrderItemImage
            Decoders.addDecoder(clazz: OrderItemImage.self) { (source: AnyObject) -> OrderItemImage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderItemImage()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.index = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["index"])
                instance.thumbnailUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumbnailUrl"])
                instance.manipCommand = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manipCommand"])
                instance.spaceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["spaceId"])
                return instance
            }
			

			// Decoder for [OrderPayment]
            Decoders.addDecoder(clazz: [OrderPayment].self) { (source: AnyObject) -> [OrderPayment] in
                return Decoders.decode(clazz: [OrderPayment].self, source: source)
            }
			// Decoder for OrderPayment
            Decoders.addDecoder(clazz: OrderPayment.self) { (source: AnyObject) -> OrderPayment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderPayment()
                instance.braintreeEncryptedCCNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["braintreeEncryptedCCNumber"])
                instance.braintreeEncryptedCCExpDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["braintreeEncryptedCCExpDate"])
                instance.braintreeEncryptedCCV = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["braintreeEncryptedCCV"])
                instance.braintreePaymentNonce = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["braintreePaymentNonce"])
                instance.partnerBillingKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["partnerBillingKey"])
                instance.total = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["total"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyCode"])
                return instance
            }
			

			// Decoder for [OrderPriceResult]
            Decoders.addDecoder(clazz: [OrderPriceResult].self) { (source: AnyObject) -> [OrderPriceResult] in
                return Decoders.decode(clazz: [OrderPriceResult].self, source: source)
            }
			// Decoder for OrderPriceResult
            Decoders.addDecoder(clazz: OrderPriceResult.self) { (source: AnyObject) -> OrderPriceResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderPriceResult()
                instance.items = Decoders.decodeOptional(clazz: PriceInfo.self, source: sourceDictionary["items"])
                instance.shipping = Decoders.decodeOptional(clazz: PriceInfo.self, source: sourceDictionary["shipping"])
                instance.tax = Decoders.decodeOptional(clazz: PriceInfo.self, source: sourceDictionary["tax"])
                instance.couponCode = Decoders.decodeOptional(clazz: PriceInfo.self, source: sourceDictionary["couponCode"])
                instance.couponType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["couponType"])
                instance.couponUsed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["couponUsed"])
                instance.hadCouponApply = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hadCouponApply"])
                instance.dollarsOff = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["dollarsOff"])
                instance.percentOff = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["percentOff"])
                instance.hadError = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hadError"])
                return instance
            }
			

			// Decoder for [OrderResult]
            Decoders.addDecoder(clazz: [OrderResult].self) { (source: AnyObject) -> [OrderResult] in
                return Decoders.decode(clazz: [OrderResult].self, source: source)
            }
			// Decoder for OrderResult
            Decoders.addDecoder(clazz: OrderResult.self) { (source: AnyObject) -> OrderResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderResult()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }
			

			// Decoder for [OrderStatusUpdateResult]
            Decoders.addDecoder(clazz: [OrderStatusUpdateResult].self) { (source: AnyObject) -> [OrderStatusUpdateResult] in
                return Decoders.decode(clazz: [OrderStatusUpdateResult].self, source: source)
            }
			// Decoder for OrderStatusUpdateResult
            Decoders.addDecoder(clazz: OrderStatusUpdateResult.self) { (source: AnyObject) -> OrderStatusUpdateResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderStatusUpdateResult()
                instance.hadError = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hadError"])
                return instance
            }
			

			// Decoder for [Payment]
            Decoders.addDecoder(clazz: [Payment].self) { (source: AnyObject) -> [Payment] in
                return Decoders.decode(clazz: [Payment].self, source: source)
            }
			// Decoder for Payment
            Decoders.addDecoder(clazz: Payment.self) { (source: AnyObject) -> Payment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Payment()
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyCode"])
                return instance
            }
			

			// Decoder for [PaymentValidationRequest]
            Decoders.addDecoder(clazz: [PaymentValidationRequest].self) { (source: AnyObject) -> [PaymentValidationRequest] in
                return Decoders.decode(clazz: [PaymentValidationRequest].self, source: source)
            }
			// Decoder for PaymentValidationRequest
            Decoders.addDecoder(clazz: PaymentValidationRequest.self) { (source: AnyObject) -> PaymentValidationRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentValidationRequest()
                instance.orderId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderId"])
                instance.payPalKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payPalKey"])
                return instance
            }
			

			// Decoder for [PaymentValidationResponse]
            Decoders.addDecoder(clazz: [PaymentValidationResponse].self) { (source: AnyObject) -> [PaymentValidationResponse] in
                return Decoders.decode(clazz: [PaymentValidationResponse].self, source: source)
            }
			// Decoder for PaymentValidationResponse
            Decoders.addDecoder(clazz: PaymentValidationResponse.self) { (source: AnyObject) -> PaymentValidationResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentValidationResponse()
                instance.isValid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isValid"])
                return instance
            }
			

			// Decoder for [PostOrder]
            Decoders.addDecoder(clazz: [PostOrder].self) { (source: AnyObject) -> [PostOrder] in
                return Decoders.decode(clazz: [PostOrder].self, source: source)
            }
			// Decoder for PostOrder
            Decoders.addDecoder(clazz: PostOrder.self) { (source: AnyObject) -> PostOrder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostOrder()
                instance.shipToAddress = Decoders.decodeOptional(clazz: ShipToAddress.self, source: sourceDictionary["shipToAddress"])
                instance.billingAddress = Decoders.decodeOptional(clazz: ShipToAddress.self, source: sourceDictionary["billingAddress"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.payment = Decoders.decodeOptional(clazz: OrderPayment.self, source: sourceDictionary["payment"])
                instance.sourceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceId"])
                instance.isPreSubmit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isPreSubmit"])
                instance.couponCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["couponCode"])
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                return instance
            }
			

			// Decoder for [PostOrderItem]
            Decoders.addDecoder(clazz: [PostOrderItem].self) { (source: AnyObject) -> [PostOrderItem] in
                return Decoders.decode(clazz: [PostOrderItem].self, source: source)
            }
			// Decoder for PostOrderItem
            Decoders.addDecoder(clazz: PostOrderItem.self) { (source: AnyObject) -> PostOrderItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostOrderItem()
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.SKU = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SKU"])
                instance.shipCarrierMethodId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["shipCarrierMethodId"])
                instance.shipType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipType"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                instance.sourceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceId"])
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                return instance
            }
			

			// Decoder for [PostSubmittedItem]
            Decoders.addDecoder(clazz: [PostSubmittedItem].self) { (source: AnyObject) -> [PostSubmittedItem] in
                return Decoders.decode(clazz: [PostSubmittedItem].self, source: source)
            }
			// Decoder for PostSubmittedItem
            Decoders.addDecoder(clazz: PostSubmittedItem.self) { (source: AnyObject) -> PostSubmittedItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostSubmittedItem()
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.productId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["productId"])
                instance.product = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["product"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.trackingNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingNumber"])
                instance.trackingUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingUrl"])
                instance.shipCarrierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipCarrierName"])
                instance.price = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["price"])
                instance.discountAmount = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["discountAmount"])
                instance.sourceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceId"])
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                instance.shipments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["shipments"])
                return instance
            }
			

			// Decoder for [PostSubmittedOrder]
            Decoders.addDecoder(clazz: [PostSubmittedOrder].self) { (source: AnyObject) -> [PostSubmittedOrder] in
                return Decoders.decode(clazz: [PostSubmittedOrder].self, source: source)
            }
			// Decoder for PostSubmittedOrder
            Decoders.addDecoder(clazz: PostSubmittedOrder.self) { (source: AnyObject) -> PostSubmittedOrder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostSubmittedOrder()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.niceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["niceId"])
                instance.souceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["souceId"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.total = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["total"])
                instance.shippingTotal = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["shippingTotal"])
                instance.discountAmount = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["discountAmount"])
                instance.discountCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discountCode"])
                instance.billingAddress = Decoders.decodeOptional(clazz: ShipToAddress.self, source: sourceDictionary["billingAddress"])
                instance.shippingAddress = Decoders.decodeOptional(clazz: ShipToAddress.self, source: sourceDictionary["shippingAddress"])
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                return instance
            }
			

			// Decoder for [Preconfiguration]
            Decoders.addDecoder(clazz: [Preconfiguration].self) { (source: AnyObject) -> [Preconfiguration] in
                return Decoders.decode(clazz: [Preconfiguration].self, source: source)
            }
			// Decoder for Preconfiguration
            Decoders.addDecoder(clazz: Preconfiguration.self) { (source: AnyObject) -> Preconfiguration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Preconfiguration()
                instance.spaceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["spaceId"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }
			

			// Decoder for [PreconfiguredItem]
            Decoders.addDecoder(clazz: [PreconfiguredItem].self) { (source: AnyObject) -> [PreconfiguredItem] in
                return Decoders.decode(clazz: [PreconfiguredItem].self, source: source)
            }
			// Decoder for PreconfiguredItem
            Decoders.addDecoder(clazz: PreconfiguredItem.self) { (source: AnyObject) -> PreconfiguredItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PreconfiguredItem()
                instance.productId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["productId"])
                instance.productVariantSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productVariantSku"])
                instance.preconfigurations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["preconfigurations"])
                return instance
            }
			

			// Decoder for [PreconfiguredProduct]
            Decoders.addDecoder(clazz: [PreconfiguredProduct].self) { (source: AnyObject) -> [PreconfiguredProduct] in
                return Decoders.decode(clazz: [PreconfiguredProduct].self, source: source)
            }
			// Decoder for PreconfiguredProduct
            Decoders.addDecoder(clazz: PreconfiguredProduct.self) { (source: AnyObject) -> PreconfiguredProduct in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PreconfiguredProduct()
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.price = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["price"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                return instance
            }
			

			// Decoder for [PreconfiguredProductImage]
            Decoders.addDecoder(clazz: [PreconfiguredProductImage].self) { (source: AnyObject) -> [PreconfiguredProductImage] in
                return Decoders.decode(clazz: [PreconfiguredProductImage].self, source: source)
            }
			// Decoder for PreconfiguredProductImage
            Decoders.addDecoder(clazz: PreconfiguredProductImage.self) { (source: AnyObject) -> PreconfiguredProductImage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PreconfiguredProductImage()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.index = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["index"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }
			

			// Decoder for [PreconfiguredProductInsert]
            Decoders.addDecoder(clazz: [PreconfiguredProductInsert].self) { (source: AnyObject) -> [PreconfiguredProductInsert] in
                return Decoders.decode(clazz: [PreconfiguredProductInsert].self, source: source)
            }
			// Decoder for PreconfiguredProductInsert
            Decoders.addDecoder(clazz: PreconfiguredProductInsert.self) { (source: AnyObject) -> PreconfiguredProductInsert in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PreconfiguredProductInsert()
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.price = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["price"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                return instance
            }
			

			// Decoder for [PreconfiguredProductsInsertResponse]
            Decoders.addDecoder(clazz: [PreconfiguredProductsInsertResponse].self) { (source: AnyObject) -> [PreconfiguredProductsInsertResponse] in
                return Decoders.decode(clazz: [PreconfiguredProductsInsertResponse].self, source: source)
            }
			// Decoder for PreconfiguredProductsInsertResponse
            Decoders.addDecoder(clazz: PreconfiguredProductsInsertResponse.self) { (source: AnyObject) -> PreconfiguredProductsInsertResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PreconfiguredProductsInsertResponse()
                return instance
            }
			

			// Decoder for [PreconfiguredProductsResponse]
            Decoders.addDecoder(clazz: [PreconfiguredProductsResponse].self) { (source: AnyObject) -> [PreconfiguredProductsResponse] in
                return Decoders.decode(clazz: [PreconfiguredProductsResponse].self, source: source)
            }
			// Decoder for PreconfiguredProductsResponse
            Decoders.addDecoder(clazz: PreconfiguredProductsResponse.self) { (source: AnyObject) -> PreconfiguredProductsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PreconfiguredProductsResponse()
                instance.preconfiguredProducts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["preconfiguredProducts"])
                return instance
            }
			

			// Decoder for [PriceInfo]
            Decoders.addDecoder(clazz: [PriceInfo].self) { (source: AnyObject) -> [PriceInfo] in
                return Decoders.decode(clazz: [PriceInfo].self, source: source)
            }
			// Decoder for PriceInfo
            Decoders.addDecoder(clazz: PriceInfo.self) { (source: AnyObject) -> PriceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PriceInfo()
                instance.price = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["price"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyCode"])
                instance.formattedPrice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formattedPrice"])
                instance.currencyFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyFormat"])
                instance.currencyDigits = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["currencyDigits"])
                return instance
            }
			

			// Decoder for [Product]
            Decoders.addDecoder(clazz: [Product].self) { (source: AnyObject) -> [Product] in
                return Decoders.decode(clazz: [Product].self, source: source)
            }
			// Decoder for Product
            Decoders.addDecoder(clazz: Product.self) { (source: AnyObject) -> Product in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Product()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.uId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortDescription"])
                instance.hasAvailableProductVariants = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasAvailableProductVariants"])
                instance.hasProductTemplates = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasProductTemplates"])
                instance.featuredIndex = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["featuredIndex"])
                instance.maxZoom = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxZoom"])
                instance.retailPrice = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["retailPrice"])
                instance.info = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["info"])
                instance.productImage = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["productImage"])
                instance.priceInfo = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["priceInfo"])
                instance.partnerPriceInfo = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["partnerPriceInfo"])
                instance.categories = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["categories"])
                return instance
            }
			

			// Decoder for [ProductBuildInfo]
            Decoders.addDecoder(clazz: [ProductBuildInfo].self) { (source: AnyObject) -> [ProductBuildInfo] in
                return Decoders.decode(clazz: [ProductBuildInfo].self, source: source)
            }
			// Decoder for ProductBuildInfo
            Decoders.addDecoder(clazz: ProductBuildInfo.self) { (source: AnyObject) -> ProductBuildInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductBuildInfo()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_type"])
                instance.zIndex = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["zIndex"])
                instance.x1 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["x1"])
                instance.x2 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["x2"])
                instance.y1 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["y1"])
                instance.y2 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["y2"])
                instance.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"])
                instance.backgroundImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["backgroundImageUrl"])
                instance.overlayImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["overlayImageUrl"])
                instance.fontName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fontName"])
                instance.fontSize = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fontSize"])
                instance.fontHAlignment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fontHAlignment"])
                instance.fontVAlighment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fontVAlighment"])
                instance.defaultText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultText"])
                return instance
            }
			

			// Decoder for [ProductBuildInfoResponse]
            Decoders.addDecoder(clazz: [ProductBuildInfoResponse].self) { (source: AnyObject) -> [ProductBuildInfoResponse] in
                return Decoders.decode(clazz: [ProductBuildInfoResponse].self, source: source)
            }
			// Decoder for ProductBuildInfoResponse
            Decoders.addDecoder(clazz: ProductBuildInfoResponse.self) { (source: AnyObject) -> ProductBuildInfoResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductBuildInfoResponse()
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"])
                return instance
            }
			

			// Decoder for [ProductBuildInfoSpace]
            Decoders.addDecoder(clazz: [ProductBuildInfoSpace].self) { (source: AnyObject) -> [ProductBuildInfoSpace] in
                return Decoders.decode(clazz: [ProductBuildInfoSpace].self, source: source)
            }
			// Decoder for ProductBuildInfoSpace
            Decoders.addDecoder(clazz: ProductBuildInfoSpace.self) { (source: AnyObject) -> ProductBuildInfoSpace in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductBuildInfoSpace()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.index = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["index"])
                instance.defaultRotation = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["defaultRotation"])
                instance.layers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["layers"])
                return instance
            }
			

			// Decoder for [ProductBuildOption]
            Decoders.addDecoder(clazz: [ProductBuildOption].self) { (source: AnyObject) -> [ProductBuildOption] in
                return Decoders.decode(clazz: [ProductBuildOption].self, source: source)
            }
			// Decoder for ProductBuildOption
            Decoders.addDecoder(clazz: ProductBuildOption.self) { (source: AnyObject) -> ProductBuildOption in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductBuildOption()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                instance.isDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isDefault"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.isPartnerSpecific = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isPartnerSpecific"])
                instance.spaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["spaces"])
                return instance
            }
			

			// Decoder for [ProductImage]
            Decoders.addDecoder(clazz: [ProductImage].self) { (source: AnyObject) -> [ProductImage] in
                return Decoders.decode(clazz: [ProductImage].self, source: source)
            }
			// Decoder for ProductImage
            Decoders.addDecoder(clazz: ProductImage.self) { (source: AnyObject) -> ProductImage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductImage()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.index = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["index"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.imageTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["imageTypes"])
                return instance
            }
			

			// Decoder for [ProductInfo]
            Decoders.addDecoder(clazz: [ProductInfo].self) { (source: AnyObject) -> [ProductInfo] in
                return Decoders.decode(clazz: [ProductInfo].self, source: source)
            }
			// Decoder for ProductInfo
            Decoders.addDecoder(clazz: ProductInfo.self) { (source: AnyObject) -> ProductInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductInfo()
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentType"])
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.index = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["index"])
                return instance
            }
			

			// Decoder for [ProductList]
            Decoders.addDecoder(clazz: [ProductList].self) { (source: AnyObject) -> [ProductList] in
                return Decoders.decode(clazz: [ProductList].self, source: source)
            }
			// Decoder for ProductList
            Decoders.addDecoder(clazz: ProductList.self) { (source: AnyObject) -> ProductList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductList()
                instance.products = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["products"])
                return instance
            }
			

			// Decoder for [ProductOption]
            Decoders.addDecoder(clazz: [ProductOption].self) { (source: AnyObject) -> [ProductOption] in
                return Decoders.decode(clazz: [ProductOption].self, source: source)
            }
			// Decoder for ProductOption
            Decoders.addDecoder(clazz: ProductOption.self) { (source: AnyObject) -> ProductOption in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductOption()
                instance.optionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["optionId"])
                instance.valueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valueId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                instance.imageType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageType"])
                instance.rgbaColor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rgbaColor"])
                instance.cmValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cmValue"])
                instance.sortValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sortValue"])
                return instance
            }
			

			// Decoder for [ProductOptionList]
            Decoders.addDecoder(clazz: [ProductOptionList].self) { (source: AnyObject) -> [ProductOptionList] in
                return Decoders.decode(clazz: [ProductOptionList].self, source: source)
            }
			// Decoder for ProductOptionList
            Decoders.addDecoder(clazz: ProductOptionList.self) { (source: AnyObject) -> ProductOptionList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductOptionList()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }
			

			// Decoder for [ProductOptionValueSettings]
            Decoders.addDecoder(clazz: [ProductOptionValueSettings].self) { (source: AnyObject) -> [ProductOptionValueSettings] in
                return Decoders.decode(clazz: [ProductOptionValueSettings].self, source: source)
            }
			// Decoder for ProductOptionValueSettings
            Decoders.addDecoder(clazz: ProductOptionValueSettings.self) { (source: AnyObject) -> ProductOptionValueSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductOptionValueSettings()
                instance.iconUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconUrl"])
                instance.iconType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconType"])
                instance.colorRgba = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["colorRgba"])
                return instance
            }
			

			// Decoder for [ProductPreviewImage]
            Decoders.addDecoder(clazz: [ProductPreviewImage].self) { (source: AnyObject) -> [ProductPreviewImage] in
                return Decoders.decode(clazz: [ProductPreviewImage].self, source: source)
            }
			// Decoder for ProductPreviewImage
            Decoders.addDecoder(clazz: ProductPreviewImage.self) { (source: AnyObject) -> ProductPreviewImage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductPreviewImage()
                instance.layerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["layerId"])
                instance.image = Decoders.decodeOptional(clazz: ProductPreviewImageSpec.self, source: sourceDictionary["image"])
                return instance
            }
			

			// Decoder for [ProductPreviewImageSpec]
            Decoders.addDecoder(clazz: [ProductPreviewImageSpec].self) { (source: AnyObject) -> [ProductPreviewImageSpec] in
                return Decoders.decode(clazz: [ProductPreviewImageSpec].self, source: source)
            }
			// Decoder for ProductPreviewImageSpec
            Decoders.addDecoder(clazz: ProductPreviewImageSpec.self) { (source: AnyObject) -> ProductPreviewImageSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductPreviewImageSpec()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.x1 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["x1"])
                instance.x2 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["x2"])
                instance.y1 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["y1"])
                instance.y2 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["y2"])
                return instance
            }
			

			// Decoder for [ProductPreviewRequest]
            Decoders.addDecoder(clazz: [ProductPreviewRequest].self) { (source: AnyObject) -> [ProductPreviewRequest] in
                return Decoders.decode(clazz: [ProductPreviewRequest].self, source: source)
            }
			// Decoder for ProductPreviewRequest
            Decoders.addDecoder(clazz: ProductPreviewRequest.self) { (source: AnyObject) -> ProductPreviewRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductPreviewRequest()
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                instance.maxHeight = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxHeight"])
                instance.maxWidth = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxWidth"])
                return instance
            }
			

			// Decoder for [ProductPreviewResponse]
            Decoders.addDecoder(clazz: [ProductPreviewResponse].self) { (source: AnyObject) -> [ProductPreviewResponse] in
                return Decoders.decode(clazz: [ProductPreviewResponse].self, source: source)
            }
			// Decoder for ProductPreviewResponse
            Decoders.addDecoder(clazz: ProductPreviewResponse.self) { (source: AnyObject) -> ProductPreviewResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductPreviewResponse()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.hadError = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hadError"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                return instance
            }
			

			// Decoder for [ProductPriceInfo]
            Decoders.addDecoder(clazz: [ProductPriceInfo].self) { (source: AnyObject) -> [ProductPriceInfo] in
                return Decoders.decode(clazz: [ProductPriceInfo].self, source: source)
            }
			// Decoder for ProductPriceInfo
            Decoders.addDecoder(clazz: ProductPriceInfo.self) { (source: AnyObject) -> ProductPriceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductPriceInfo()
                instance.price = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["price"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyCode"])
                instance.formattedPrice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formattedPrice"])
                instance.currencyFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyFormat"])
                instance.currencyDigits = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["currencyDigits"])
                return instance
            }
			

			// Decoder for [ProductVariant]
            Decoders.addDecoder(clazz: [ProductVariant].self) { (source: AnyObject) -> [ProductVariant] in
                return Decoders.decode(clazz: [ProductVariant].self, source: source)
            }
			// Decoder for ProductVariant
            Decoders.addDecoder(clazz: ProductVariant.self) { (source: AnyObject) -> ProductVariant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductVariant()
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.maxImages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxImages"])
                instance.hasTemplates = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasTemplates"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"])
                instance.priceInfo = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["priceInfo"])
                instance.partnerPriceInfo = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["partnerPriceInfo"])
                return instance
            }
			

			// Decoder for [ProductVariantResponse]
            Decoders.addDecoder(clazz: [ProductVariantResponse].self) { (source: AnyObject) -> [ProductVariantResponse] in
                return Decoders.decode(clazz: [ProductVariantResponse].self, source: source)
            }
			// Decoder for ProductVariantResponse
            Decoders.addDecoder(clazz: ProductVariantResponse.self) { (source: AnyObject) -> ProductVariantResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductVariantResponse()
                instance.productVariants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["productVariants"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"])
                return instance
            }
			

			// Decoder for [Result]
            Decoders.addDecoder(clazz: [Result].self) { (source: AnyObject) -> [Result] in
                return Decoders.decode(clazz: [Result].self, source: source)
            }
			// Decoder for Result
            Decoders.addDecoder(clazz: Result.self) { (source: AnyObject) -> Result in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Result()
                instance.isValid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isValid"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                instance.score = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["score"])
                instance.proposedAddress = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["proposedAddress"])
                return instance
            }
			

			// Decoder for [SearchSubmittedOrder]
            Decoders.addDecoder(clazz: [SearchSubmittedOrder].self) { (source: AnyObject) -> [SearchSubmittedOrder] in
                return Decoders.decode(clazz: [SearchSubmittedOrder].self, source: source)
            }
			// Decoder for SearchSubmittedOrder
            Decoders.addDecoder(clazz: SearchSubmittedOrder.self) { (source: AnyObject) -> SearchSubmittedOrder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SearchSubmittedOrder()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.niceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["niceId"])
                instance.sourceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceId"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.total = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["total"])
                instance.shippingTotal = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["shippingTotal"])
                instance.discountCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discountCode"])
                instance.discountAmount = Decoders.decodeOptional(clazz: ProductPriceInfo.self, source: sourceDictionary["discountAmount"])
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                return instance
            }
			

			// Decoder for [ShipEstimate]
            Decoders.addDecoder(clazz: [ShipEstimate].self) { (source: AnyObject) -> [ShipEstimate] in
                return Decoders.decode(clazz: [ShipEstimate].self, source: source)
            }
			// Decoder for ShipEstimate
            Decoders.addDecoder(clazz: ShipEstimate.self) { (source: AnyObject) -> ShipEstimate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShipEstimate()
                instance.minPrice = Decoders.decodeOptional(clazz: ShipPrice.self, source: sourceDictionary["minPrice"])
                instance.maxPrice = Decoders.decodeOptional(clazz: ShipPrice.self, source: sourceDictionary["maxPrice"])
                instance.vendorCountryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorCountryCode"])
                instance.canShipExpedited = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["canShipExpedited"])
                instance.estShipDays = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["estShipDays"])
                return instance
            }
			

			// Decoder for [ShipItem]
            Decoders.addDecoder(clazz: [ShipItem].self) { (source: AnyObject) -> [ShipItem] in
                return Decoders.decode(clazz: [ShipItem].self, source: source)
            }
			// Decoder for ShipItem
            Decoders.addDecoder(clazz: ShipItem.self) { (source: AnyObject) -> ShipItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShipItem()
                instance.sKUs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sKUs"])
                instance.shipOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["shipOptions"])
                return instance
            }
			

			// Decoder for [ShipOption]
            Decoders.addDecoder(clazz: [ShipOption].self) { (source: AnyObject) -> [ShipOption] in
                return Decoders.decode(clazz: [ShipOption].self, source: source)
            }
			// Decoder for ShipOption
            Decoders.addDecoder(clazz: ShipOption.self) { (source: AnyObject) -> ShipOption in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShipOption()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.methodType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["methodType"])
                instance.methodId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["methodId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.carrierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrierName"])
                instance.carrierLogoUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrierLogoUrl"])
                instance.price = Decoders.decodeOptional(clazz: ShipPrice.self, source: sourceDictionary["price"])
                instance.partnerPrice = Decoders.decodeOptional(clazz: ShipPrice.self, source: sourceDictionary["partnerPrice"])
                instance.estBusinessDaysTilDelivery = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["estBusinessDaysTilDelivery"])
                return instance
            }
			

			// Decoder for [ShipPrice]
            Decoders.addDecoder(clazz: [ShipPrice].self) { (source: AnyObject) -> [ShipPrice] in
                return Decoders.decode(clazz: [ShipPrice].self, source: source)
            }
			// Decoder for ShipPrice
            Decoders.addDecoder(clazz: ShipPrice.self) { (source: AnyObject) -> ShipPrice in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShipPrice()
                instance.price = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["price"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyCode"])
                instance.formattedPrice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formattedPrice"])
                return instance
            }
			

			// Decoder for [ShipToAddress]
            Decoders.addDecoder(clazz: [ShipToAddress].self) { (source: AnyObject) -> [ShipToAddress] in
                return Decoders.decode(clazz: [ShipToAddress].self, source: source)
            }
			// Decoder for ShipToAddress
            Decoders.addDecoder(clazz: ShipToAddress.self) { (source: AnyObject) -> ShipToAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShipToAddress()
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.line1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line1"])
                instance.line2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postalCode"])
                instance.isBusinessAddress = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isBusinessAddress"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                return instance
            }
			

			// Decoder for [Shipment]
            Decoders.addDecoder(clazz: [Shipment].self) { (source: AnyObject) -> [Shipment] in
                return Decoders.decode(clazz: [Shipment].self, source: source)
            }
			// Decoder for Shipment
            Decoders.addDecoder(clazz: Shipment.self) { (source: AnyObject) -> Shipment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Shipment()
                instance.trackingNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingNumber"])
                instance.trackingUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingUrl"])
                instance.shipCarrierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipCarrierName"])
                return instance
            }
			

			// Decoder for [ShippingPricesRequest]
            Decoders.addDecoder(clazz: [ShippingPricesRequest].self) { (source: AnyObject) -> [ShippingPricesRequest] in
                return Decoders.decode(clazz: [ShippingPricesRequest].self, source: source)
            }
			// Decoder for ShippingPricesRequest
            Decoders.addDecoder(clazz: ShippingPricesRequest.self) { (source: AnyObject) -> ShippingPricesRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShippingPricesRequest()
                instance.shipToPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToPostalCode"])
                instance.shipToCountry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToCountry"])
                instance.shipToState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToState"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyCode"])
                instance.languageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["languageCode"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }
			

			// Decoder for [ShippingPricesResult]
            Decoders.addDecoder(clazz: [ShippingPricesResult].self) { (source: AnyObject) -> [ShippingPricesResult] in
                return Decoders.decode(clazz: [ShippingPricesResult].self, source: source)
            }
			// Decoder for ShippingPricesResult
            Decoders.addDecoder(clazz: ShippingPricesResult.self) { (source: AnyObject) -> ShippingPricesResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShippingPricesResult()
                instance.result = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["result"])
                return instance
            }
			

			// Decoder for [SkuQuantityPair]
            Decoders.addDecoder(clazz: [SkuQuantityPair].self) { (source: AnyObject) -> [SkuQuantityPair] in
                return Decoders.decode(clazz: [SkuQuantityPair].self, source: source)
            }
			// Decoder for SkuQuantityPair
            Decoders.addDecoder(clazz: SkuQuantityPair.self) { (source: AnyObject) -> SkuQuantityPair in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SkuQuantityPair()
                instance.SKU = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SKU"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                return instance
            }
			

			// Decoder for [SubmittedOrder]
            Decoders.addDecoder(clazz: [SubmittedOrder].self) { (source: AnyObject) -> [SubmittedOrder] in
                return Decoders.decode(clazz: [SubmittedOrder].self, source: source)
            }
			// Decoder for SubmittedOrder
            Decoders.addDecoder(clazz: SubmittedOrder.self) { (source: AnyObject) -> SubmittedOrder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SubmittedOrder()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }
			

			// Decoder for [SubmittedOrderList]
            Decoders.addDecoder(clazz: [SubmittedOrderList].self) { (source: AnyObject) -> [SubmittedOrderList] in
                return Decoders.decode(clazz: [SubmittedOrderList].self, source: source)
            }
			// Decoder for SubmittedOrderList
            Decoders.addDecoder(clazz: SubmittedOrderList.self) { (source: AnyObject) -> SubmittedOrderList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SubmittedOrderList()
                instance.orders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orders"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                instance.page = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["page"])
                instance.hadError = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hadError"])
                return instance
            }
			

			// Decoder for [UserInfo]
            Decoders.addDecoder(clazz: [UserInfo].self) { (source: AnyObject) -> [UserInfo] in
                return Decoders.decode(clazz: [UserInfo].self, source: source)
            }
			// Decoder for UserInfo
            Decoders.addDecoder(clazz: UserInfo.self) { (source: AnyObject) -> UserInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserInfo()
                instance.languageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["languageCode"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.countryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryName"])
                instance.currencyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyName"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyCode"])
                instance.currencyFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currencyFormat"])
                return instance
            }
			

			// Decoder for [ValidationFailure]
            Decoders.addDecoder(clazz: [ValidationFailure].self) { (source: AnyObject) -> [ValidationFailure] in
                return Decoders.decode(clazz: [ValidationFailure].self, source: source)
            }
			// Decoder for ValidationFailure
            Decoders.addDecoder(clazz: ValidationFailure.self) { (source: AnyObject) -> ValidationFailure in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ValidationFailure()
                instance.propertyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["propertyName"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                instance.attemptedValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attemptedValue"])
                return instance
            }
			
        }
    }
}
