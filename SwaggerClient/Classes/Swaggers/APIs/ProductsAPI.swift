//
// ProductsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ProductsAPI: APIBase {
    /**
     
     Get a list of products
     
     - parameter countryCode: (query) The country code where it would be shipped to. For example, &#39;US&#39; or &#39;CA&#39;
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api
     - parameter all: (query) Whether or not to return all available printio products, or just ones in your recipe. Pass &#39;true&#39; or &#39;false&#39;.
     - parameter languageCode: (query) Two-character language code, defaults to \&quot;en\&quot; (english)
     - parameter currencyCode: (query) Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getProducts(countryCode countryCode: String, version: Int, source: String, all: String?, languageCode: String?, currencyCode: String?, completion: ((data: ProductList?, error: ErrorType?) -> Void)) {
        getProductsWithRequestBuilder(countryCode: countryCode, version: version, source: source, all: all, languageCode: languageCode, currencyCode: currencyCode).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a list of products
     
     - GET /products/v/{version}/source/{source}/
     - Get a list of products. The products returned may have variants. Products returned are only those within the overall recipe. All images returned from the service are dynamically resizable by adding width and height querystrings.
     - examples: [{contentType=application/json, example={
  "Products" : [ {
    "RetailPrice" : {
      "CurrencyCode" : "aeiou",
      "Price" : 123456789,
      "CurrencyFormat" : "aeiou",
      "FormattedPrice" : "aeiou",
      "CurrencyDigits" : 123456789
    },
    "Categories" : [ {
      "Id" : 123456789,
      "Name" : "aeiou"
    } ],
    "ProductImage" : [ {
      "Description" : "aeiou",
      "ImageTypes" : [ "aeiou" ],
      "Index" : 123456789,
      "Id" : "aeiou",
      "Url" : "aeiou"
    } ],
    "Info" : [ {
      "ContentType" : "aeiou",
      "Content" : [ "aeiou" ],
      "Index" : 123456789,
      "Key" : "aeiou"
    } ],
    "Name" : "aeiou",
    "ShortDescription" : "aeiou",
    "PriceInfo" : "",
    "UId" : "aeiou",
    "HasAvailableProductVariants" : true,
    "FeaturedIndex" : 123456789,
    "HasProductTemplates" : true,
    "Id" : 123456789,
    "MaxZoom" : 123456789
  } ]
}}]
     
     - parameter countryCode: (query) The country code where it would be shipped to. For example, &#39;US&#39; or &#39;CA&#39;
     - parameter version: (path) Version of the api being used
     - parameter source: (path) Description of the source-- ios, android, api
     - parameter all: (query) Whether or not to return all available printio products, or just ones in your recipe. Pass &#39;true&#39; or &#39;false&#39;.
     - parameter languageCode: (query) Two-character language code, defaults to \&quot;en\&quot; (english)
     - parameter currencyCode: (query) Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)

     - returns: RequestBuilder<ProductList> 
     */
    public class func getProductsWithRequestBuilder(countryCode countryCode: String, version: Int, source: String, all: String?, languageCode: String?, currencyCode: String?) -> RequestBuilder<ProductList> {
        var path = "/products/v/{version}/source/{source}/"
        path = path.stringByReplacingOccurrencesOfString("{version}", withString: "\(version)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{source}", withString: "\(source)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "countryCode": countryCode,
            "all": all,
            "languageCode": languageCode,
            "currencyCode": currencyCode
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ProductList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

}
